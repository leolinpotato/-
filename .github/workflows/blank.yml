import numpy as np
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import os
import cv2

DATADIR = r"C:\Users\user\Desktop\專題\datasets"
CATEGORIES_train = ['1','2','3','4','5','6','7','8']
CATEGORIES_test = ['test']

training_data = []
testing_data = []
def create_training_data() :
    for category in CATEGORIES_train :
        path = os.path.join(DATADIR,category)
        class_num = CATEGORIES_train.index(category)
        print(path)
        for img in os.listdir(path) :
            try:
                new_path = os.path.join(path,img)
                img_array = mpimg.imread(new_path,1)#, cv2.IMREAD_GRAYSCALE)
                training_data.append([img_array, class_num])
            except Exception as e :
                pass
            
def create_testing_data() :
    for category in CATEGORIES_test :
        path = os.path.join(DATADIR,category)
        class_num = CATEGORIES_test.index(category)
        print(path)
        for img in os.listdir(path) :
            try:
                new_path = os.path.join(path,img)
                img_array = mpimg.imread(new_path,1)#, cv2.IMREAD_GRAYSCALE)
                new_array = cv2.resize(img_array, (224, 224))
                testing_data.append([img_array, class_num])
            except Exception as e :
                pass

create_training_data()
create_testing_data()

print(len(training_data))
print(len(testing_data))

import random
random.shuffle(training_data)

x_train = []
y_train = []
x_test = []
y_test = []
for faetures,lable in training_data :
    x_train.append(faetures)
    y_train.append(lable)
    
for faetures,lable in testing_data :
    x_test.append(faetures)
    y_test.append(lable)

x_train = np.array(x_train).reshape(-1, 224, 224, 3)
x_test = np.array(x_test).reshape(-1, 224, 224, 3)

import keras,os
from keras.models import Sequential
from keras.layers import Dense, Conv2D, MaxPool2D , Flatten
from keras.preprocessing.image import ImageDataGenerator
import numpy as np

model = Sequential()
model.add(Conv2D(input_shape=(224,224,3),filters=64,kernel_size=(3,3),padding="same", activation="relu"))
model.add(Conv2D(filters=64,kernel_size=(3,3),padding="same", activation="relu"))
model.add(MaxPool2D(pool_size=(2,2),strides=(2,2)))
model.add(Conv2D(filters=128, kernel_size=(3,3), padding="same", activation="relu"))
model.add(Conv2D(filters=128, kernel_size=(3,3), padding="same", activation="relu"))
model.add(MaxPool2D(pool_size=(2,2),strides=(2,2)))
model.add(Conv2D(filters=256, kernel_size=(3,3), padding="same", activation="relu"))
model.add(Conv2D(filters=256, kernel_size=(3,3), padding="same", activation="relu"))
model.add(Conv2D(filters=256, kernel_size=(3,3), padding="same", activation="relu"))
model.add(MaxPool2D(pool_size=(2,2),strides=(2,2)))
model.add(Conv2D(filters=512, kernel_size=(3,3), padding="same", activation="relu"))
model.add(Conv2D(filters=512, kernel_size=(3,3), padding="same", activation="relu"))
model.add(Conv2D(filters=512, kernel_size=(3,3), padding="same", activation="relu"))
model.add(MaxPool2D(pool_size=(2,2),strides=(2,2)))
model.add(Conv2D(filters=512, kernel_size=(3,3), padding="same", activation="relu"))
model.add(Conv2D(filters=512, kernel_size=(3,3), padding="same", activation="relu"))
model.add(Conv2D(filters=512, kernel_size=(3,3), padding="same", activation="relu"))
model.add(MaxPool2D(pool_size=(2,2),strides=(2,2)))
model.add(Flatten())
model.add(Dense(units=4096,activation="relu"))
model.add(Dense(units=4096,activation="relu"))
model.add(Dense(units=2, activation="softmax"))

from keras.optimizers import Adam
opt = Adam(lr=0.001)
model.compile(optimizer=opt, loss=keras.losses.categorical_crossentropy, metrics=['accuracy'])

model.summary()

from keras.callbacks import ModelCheckpoint, EarlyStopping
checkpoint = ModelCheckpoint("vgg16_1.h5", monitor='val_acc', verbose=1, save_best_only=True, save_weights_only=False, mode='auto', period=1)
early = EarlyStopping(monitor='val_acc', min_delta=0, patience=20, verbose=1, mode='auto')
hist = model.fit_generator(steps_per_epoch=100,generator=x_train, validation_data= x_test, validation_steps=10,epochs=100,callbacks=[checkpoint,early])

import matplotlib.pyplot as plt
plt.plot(hist.history["acc"])
plt.plot(hist.history['val_acc'])
plt.plot(hist.history['loss'])
plt.plot(hist.history['val_loss'])
plt.title("model accuracy")
plt.ylabel("Accuracy")
plt.xlabel("Epoch")
plt.legend(["Accuracy","Validation Accuracy","loss","Validation Loss"])
plt.show()
